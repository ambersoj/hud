#include "Hud.hpp"
#include "CommandInvoker.hpp"
#include "RecvCommand.hpp"
#include "UDPChannel.hpp"
#include "mpp_defines.hpp"


std::atomic<bool> running(true);

// Hud Component
Hud::Hud() : spinner_on(false), channels(nullptr), invoker(nullptr) {}

std::string Hud::receive_msg_from_cnl() {
    if (!channels) {
        std::cerr << "Error: channels not initialized in Hud!" << std::endl;
        return "";
    }

    RecvCommand recvCmd((*channels)[HUD_CNL_DCE]);
    return recvCmd.execute();
}

void Hud::run() {
    while (running) {
        std::string msg = receive_msg_from_cnl();
        if (!msg.empty()) {
            Json::CharReaderBuilder reader;
            Json::Value parsed;
            std::string errs;
            std::istringstream s(msg);

            if (Json::parseFromStream(reader, s, &parsed, &errs)) {
                if (parsed.isMember("spinner_on")) {
                    spinner_on = parsed["spinner_on"].asBool();
                }
            }
        }
        run_spinner();
    }
}

void Hud::run_spinner() {
    if (spinner_on) {
        static int state = 0;
        const char spinner_chars[] = {'\\', '|', '/', '-'};
        std::cout << "Spinner: " << spinner_chars[state] << "\r";
        std::cout.flush();
        state = (state + 1) % 4;
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }
}

void Hud::start(std::unordered_map<int, UDPChannel>& channels, CommandInvoker& invoker) {
    this->channels = &channels;  // Store reference
    this->invoker = &invoker;  // Store reference
    hudThread = std::thread(&Hud::run, this);
}

void Hud::stop() {
    running.store(false);
    if (hudThread.joinable()) {
        hudThread.join();
    }
}
